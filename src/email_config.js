// email-config.js
// Configuration file for EmailJS integration
// IMPORTANT: Update these values with your actual EmailJS credentials

export const EMAIL_CONFIG = {
  // EmailJS Configuration
  // Get these values from your EmailJS dashboard at https://www.emailjs.com/
  
  // Step 1: Sign up at https://www.emailjs.com/
  // Step 2: Go to "Email Services" and add your email provider (Gmail, Outlook, etc.)
  // Step 3: Go to "Email Templates" and create a template
  // Step 4: Get your credentials from the dashboard
  
  // Your EmailJS Public Key (found in Account -> API Keys)
  USER_ID: "yLhTDLKkKnbvKRvrV", // ✓ Public Key configured
  
  // Your Email Service ID (from Email Services section)
  SERVICE_ID: "service_mqwsmjj", // ✓ Service ID configured
  
  // Your Email Template ID (from Email Templates section)
  TEMPLATE_ID: "template_ixy9kul", // ✓ Template ID configured
  
  // Email template variables (these should match your EmailJS template)
  TEMPLATE_VARIABLES: {
    to_email: "recipient email",
    from_name: "Enhanced Code Analyzer",
    subject: "email subject",
    message: "analysis results content",
    analysis_date: "analysis timestamp",
    total_files: "number of files analyzed",
    total_issues: "total issues found"
  },
  
  // Email configuration options
  OPTIONS: {
    // Maximum email size (EmailJS limit is 50KB)
    MAX_EMAIL_SIZE: 45000, // Leave some buffer
    
    // Retry configuration
    RETRY_ATTEMPTS: 3,
    RETRY_DELAY: 1000, // milliseconds
    
    // Rate limiting (EmailJS allows 1 email per second)
    RATE_LIMIT_DELAY: 1100, // milliseconds between emails
    
    // Email content truncation
    MAX_ISSUES_PER_EMAIL: 50, // Limit issues to prevent large emails
    TRUNCATE_LONG_DESCRIPTIONS: true,
    MAX_DESCRIPTION_LENGTH: 200
  }
};

// SETUP INSTRUCTIONS:
// 1. Go to https://www.emailjs.com/ and sign up for a free account
// 2. In the EmailJS dashboard:
//    a. Click "Email Services" -> "Add New Service"
//    b. Choose your email provider (Gmail, Outlook, etc.)
//    c. Follow the setup instructions for your provider
//    d. Copy the Service ID (looks like "service_xxxxxxx")
// 3. Create an email template:
//    a. Click "Email Templates" -> "Create New Template"
//    b. Use these variables in your template:
//       {{to_email}} - Recipient email
//       {{from_name}} - Sender name
//       {{subject}} - Email subject
//       {{message}} - Analysis results
//       {{analysis_date}} - Date of analysis
//       {{total_files}} - Number of files analyzed
//       {{total_issues}} - Total issues found
//    c. Copy the Template ID (looks like "template_xxxxxxx")
// 4. Get your Public Key:
//    a. Click "Account" -> "API Keys"
//    b. Copy your Public Key
// 5. Replace the placeholder values above with your actual credentials

// Email service configuration examples for different providers
export const EMAIL_SERVICE_EXAMPLES = {
  gmail: {
    description: "Gmail configuration",
    setup: "Use Gmail service in EmailJS, enable 2FA and use App Password",
    notes: "Requires App Password if 2FA is enabled"
  },
  
  outlook: {
    description: "Outlook/Hotmail configuration", 
    setup: "Use Outlook service in EmailJS with your Microsoft account",
    notes: "Works with personal Microsoft accounts"
  },
  
  yahoo: {
    description: "Yahoo Mail configuration",
    setup: "Use Yahoo service in EmailJS with App Password",
    notes: "Requires App Password for security"
  },
  
  custom: {
    description: "Custom SMTP configuration",
    setup: "Configure custom SMTP settings in EmailJS",
    notes: "For corporate or other email providers"
  }
};

// Example EmailJS template content
export const EXAMPLE_TEMPLATE = {
  subject: "Code Analysis Results - {{analysis_date}}",
  
  html: `
    <h2>Code Analysis Complete</h2>
    
    <p>Hello,</p>
    
    <p>Your code analysis has been completed successfully. Here's a summary:</p>
    
    <div style="background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin: 20px 0;">
      <h3>Analysis Summary</h3>
      <ul>
        <li><strong>Date:</strong> {{analysis_date}}</li>
        <li><strong>Files Analyzed:</strong> {{total_files}}</li>
        <li><strong>Total Issues Found:</strong> {{total_issues}}</li>
      </ul>
    </div>
    
    <h3>Detailed Results</h3>
    <pre style="background-color: #f8f8f8; padding: 15px; border-radius: 5px; white-space: pre-wrap; font-family: monospace;">{{message}}</pre>
    
    <hr style="margin: 30px 0;">
    
    <p style="color: #666; font-size: 12px;">
      This email was generated by Enhanced Code Analyzer<br>
      Generated on {{analysis_date}}
    </p>
  `,
  
  text: `
Code Analysis Results

Hello,

Your code analysis has been completed successfully.

Analysis Summary:
- Date: {{analysis_date}}
- Files Analyzed: {{total_files}}
- Total Issues Found: {{total_issues}}

Detailed Results:
{{message}}

---
This email was generated by Enhanced Code Analyzer
Generated on {{analysis_date}}
  `
};

// Validation functions
export const validateEmailConfig = (config) => {
  const errors = [];
  
  if (!config.USER_ID || config.USER_ID === "YOUR_EMAILJS_PUBLIC_KEY") {
    errors.push("USER_ID must be set to your actual EmailJS Public Key");
  }
  
  if (!config.SERVICE_ID || config.SERVICE_ID === "YOUR_EMAIL_SERVICE_ID") {
    errors.push("SERVICE_ID must be set to your actual EmailJS Service ID");
  }
  
  if (!config.TEMPLATE_ID || config.TEMPLATE_ID === "YOUR_EMAIL_TEMPLATE_ID") {
    errors.push("TEMPLATE_ID must be set to your actual EmailJS Template ID");
  }
  
  return {
    isValid: errors.length === 0,
    errors
  };
};

// Helper function to test email configuration
export const testEmailConfig = async (config, testEmail) => {
  try {
    const validation = validateEmailConfig(config);
    if (!validation.isValid) {
      return {
        success: false,
        error: "Configuration validation failed: " + validation.errors.join(", ")
      };
    }
    
    // Initialize EmailJS with the config
    if (window.emailjs) {
      window.emailjs.init(config.USER_ID);
      
      // Send test email
      const result = await window.emailjs.send(
        config.SERVICE_ID,
        config.TEMPLATE_ID,
        {
          to_email: testEmail,
          from_name: "Enhanced Code Analyzer",
          subject: "Test Email - Configuration Check",
          message: "This is a test email to verify your EmailJS configuration is working correctly.",
          analysis_date: new Date().toLocaleString(),
          total_files: 1,
          total_issues: 0
        }
      );
      
      return {
        success: true,
        result: result
      };
    } else {
      return {
        success: false,
        error: "EmailJS library not loaded"
      };
    }
  } catch (error) {
    return {
      success: false,
      error: error.message
    };
  }
};

export default EMAIL_CONFIG;